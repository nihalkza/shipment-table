{"version":3,"sources":["tab.js","TableComponent.js","App.js","reportWebVitals.js","index.js"],"names":["descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","id","numeric","label","EnhancedTableHead","props","onRequestSort","TableHead","TableRow","headCell","TableCell","align","padding","disablePadding","sortDirection","TableSortLabel","active","direction","onClick","property","event","EnhancedTable","React","useState","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","rows","filterShipment","formatData","data","formattedData","length","row","i","push","Object","keys","Paper","TableContainer","Table","aria-labelledby","size","aria-label","TableBody","slice","hover","className","component","scope","status","name","userId","mode","type","origin","destination","total","cargo","services","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value","TableComponent","loadSkeleton","bind","dummySkeletonColumn","search","state","shipmentInfo","isLoading","fetch","then","response","json","setState","dummy","this","maxColumn","dummyColumn","Skeleton","variant","searchQuery","filter","some","key","toLowerCase","includes","Fragment","noValidate","autoComplete","TextField","onKeyUp","e","placeholder","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.456bedef.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    if (b[orderBy] === a[orderBy]) {\r\n        return 0;\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n    return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n    { id: 'status', numeric: false, label: 'Status' },\r\n    { id: 'name', numeric: false, label: 'Name (Shipment)' },\r\n    { id: 'userId', numeric: false, label: 'User ID' },\r\n    { id: 'mode', numeric: false, label: 'Mode' },\r\n    { id: 'type', numeric: false, label: 'Type' },\r\n    { id: 'origin', numeric: false, label: 'Origin' },\r\n    { id: 'destination', numeric: false, label: 'Destination' },\r\n    { id: 'total', numeric: true, label: 'Total' },\r\n    { id: 'cargo', numeric: false, label: 'Cargo' },\r\n    { id: 'services', numeric: false, label: 'Services' },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n    const { order, orderBy, onRequestSort } = props;\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {headCells.map((headCell) => (\r\n                    <TableCell\r\n                        key={headCell.id}\r\n                        align={headCell.numeric ? 'right' : 'left'}\r\n                        padding={headCell.disablePadding ? 'none' : 'default'}\r\n                        sortDirection={orderBy === headCell.id ? order : false}\r\n                    >\r\n                        <TableSortLabel\r\n                            active={orderBy === headCell.id}\r\n                            direction={orderBy === headCell.id ? order : 'asc'}\r\n                            onClick={createSortHandler(headCell.id)}\r\n                        >\r\n                            {headCell.label}\r\n                        </TableSortLabel>\r\n                    </TableCell>\r\n                ))}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default function EnhancedTable(props) {\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const rows = props.filterShipment;\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const formatData = (data) => {\r\n        let formattedData = []\r\n        if (data && data.length) {\r\n            data.map((row, i) => {\r\n                formattedData.push(\r\n                    `${Object.keys(row)[i]} : ${row[Object.keys(row)[i]]}`\r\n                )\r\n                formattedData.push(\r\n                    <br key={i} />\r\n                )\r\n            })\r\n        }\r\n        return formattedData\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <Paper>\r\n                <TableContainer>\r\n                    <Table\r\n\r\n                        aria-labelledby=\"tableTitle\"\r\n                        size='small'\r\n                        aria-label=\"enhanced table\"\r\n                    >\r\n                        <EnhancedTableHead\r\n                            order={order}\r\n                            orderBy={orderBy}\r\n                            onRequestSort={handleRequestSort}\r\n                        />\r\n                        <TableBody>\r\n                            {stableSort(rows, getComparator(order, orderBy))\r\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                                .map((row, index) => {\r\n                                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            key={row.name}\r\n                                        >\r\n                                            <TableCell className=\"text-capitalize\" component=\"th\" scope=\"row\">\r\n                                                <span className={(row.status === \"ACTIVE\") ? \"status bg-success text-white\" : (row.status === \"NEW\") ? \"status bg-warning text-dark\" : \"status bg-primary text-white\"}>\r\n                                                    {row.status}\r\n                                                </span>\r\n                                            </TableCell>\r\n                                            <TableCell className=\"text-capitalize\">{row.name}</TableCell>\r\n                                            <TableCell align=\"right\">{row.userId}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\">{row.mode}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\">{row.type}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\">{row.origin}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\" >{row.destination}</TableCell>\r\n                                            <TableCell align=\"right\">{row.total}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\" >{formatData(row.cargo)}</TableCell>\r\n                                            <TableCell className=\"text-capitalize\">{formatData(row.services)}</TableCell>\r\n                                        </TableRow>\r\n                                    );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                    rowsPerPageOptions={[5, 10, 25, 50]}\r\n                    component=\"div\"\r\n                    count={rows.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    onChangePage={handleChangePage}\r\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n            </Paper>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Tab from './tab'\r\n\r\nexport default class TableComponent extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.loadSkeleton = this.loadSkeleton.bind(this);\r\n        this.dummySkeletonColumn = this.dummySkeletonColumn.bind(this);\r\n        this.search = this.search.bind(this)\r\n        this.state = {\r\n            shipmentInfo: [],\r\n            filterShipment:[],\r\n            isLoading: true,\r\n            page: 1,\r\n            rowsPerPage:10,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('http://localhost:3000/shipments/')\r\n            .then((response) => response.json())\r\n            .then((shipmentInfo) => {\r\n                this.setState({ \r\n                    shipmentInfo,\r\n                    filterShipment:shipmentInfo,\r\n                    isLoading: false,\r\n                });\r\n            });\r\n    }\r\n\r\n    loadSkeleton() {\r\n        let dummy = [];\r\n        let maxRow = 10;\r\n        let maxColumn = 10;\r\n        for (let i = 0; i < maxRow; i++) {\r\n            dummy.push(\r\n                <TableRow key={i}>\r\n                    {this.dummySkeletonColumn(maxColumn)}\r\n                </TableRow>\r\n            )\r\n        }\r\n        return dummy;\r\n    }\r\n\r\n    dummySkeletonColumn(maxColumn) {\r\n        let dummyColumn = []\r\n        if (maxColumn) {\r\n            for (let i = 0; i < maxColumn; i++) {\r\n                dummyColumn.push(\r\n                    <TableCell key={i}>\r\n                        <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                )\r\n            }\r\n        }\r\n        return dummyColumn;\r\n    }\r\n\r\n    search(searchQuery) {\r\n        let data = this.state.shipmentInfo;\r\n        let filterShipment = [];\r\n        data.filter((row) =>\r\n            Object.keys(row).some((key) =>\r\n                (typeof row[key] === \"string\")?\r\n                    (row[key].toLowerCase().includes(searchQuery.toLowerCase()))?\r\n                        filterShipment.push(row)\r\n                    :\r\n                        null\r\n                :\r\n                    null\r\n            )\r\n        );\r\n        this.setState({filterShipment})\r\n    }\r\n\r\n\r\n    render() {\r\n        const { filterShipment,isLoading } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <form className=\"search-bar w-25 m-2\" noValidate autoComplete=\"off\">\r\n                    <div className=\"d-flex px-2 text-muted\">Search Shipment</div>\r\n                    <TextField onKeyUp={(e)=>this.search(e.target.value)} className=\"m-2 w-75\" variant=\"outlined\" placeholder=\"Search...\" size=\"small\" />\r\n                </form>\r\n                    {(!isLoading)\r\n                    ?\r\n                        <Tab filterShipment={filterShipment} />\r\n                    :\r\n                    <TableContainer className='shipment-table' component={Paper}>\r\n                    <Table size=\"small\" aria-label=\"shipment table\">\r\n                        <TableHead>\r\n                                {this.loadSkeleton()}\r\n                            </TableHead>\r\n                        </Table>    \r\n                    </TableContainer>                    \r\n                    }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './TableComponent';\nexport default class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"mainContainer\">\n                    <div className=\"text-center display-3 text-muted\">\n                        Shipment Details\n                    </div>\n                    <Table />\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}